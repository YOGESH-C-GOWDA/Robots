{"version":3,"sources":["Search.js","Cards.js","Cardlist.js","Scroll.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Search","userSearch","type","onChange","placeholder","Cards","prop","className","alt","src","id","name","email","Cardlist","roboList","map","r","i","key","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","err","info","this","setState","Component","App","event","console","log","target","value","searchItem","toUpperCase","robots","a","fetch","then","res","json","usr","fliteredItem","filter","robo","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6SAYeA,EAVA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACd,OACI,2BACIC,KAAK,SACLC,SAAUF,EACVG,YAAY,6BCUTC,G,MAdD,SAACC,GACX,OAEI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,SAASC,IAAI,kBAAkBC,IAAG,+BAA0BH,EAAKI,GAA/B,cACjD,6BACI,4BAAKJ,EAAKK,MACV,4BAAKL,EAAKM,WCaXC,G,MAnBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAMhB,OACI,yBAAKP,UAAU,YAEVO,EAASC,KAAI,SAACC,EAAGC,GACd,OAAQ,kBAAC,EAAD,CAAMC,IAAKF,EAAEN,GAAIC,KAAMK,EAAEL,KAAMD,GAAIM,EAAEN,GAAIE,MAAOI,EAAEJ,cCH3DO,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCkBJC,E,kDApBX,aAAe,IAAD,8BAEV,gBACKC,MAAQ,CACTC,UAAU,GAJJ,E,8DAQIC,EAAKC,GACnBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAA4B,IAAxBG,KAAKJ,MAAMC,SACJ,qFAEHG,KAAKX,MAAMK,a,GAlBAQ,aCoFZC,G,wDApEX,aAAe,IAAD,8BACV,gBAiBJjC,WAAa,SAACkC,GAIVC,QAAQC,IAAIF,EAAMG,QAClBF,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKP,SAAS,CAAEQ,WAAYL,EAAMG,OAAOC,QACzCH,QAAQC,IAAI,EAAKV,MAAMa,WAAWC,gBAvBlC,EAAKd,MAAQ,CACTe,OAAQ,GACRF,WAAY,IAJN,E,gEASO,IAAD,OACVG,EAAIC,MAAM,8CACXC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAG,OAAI,EAAKhB,SAAS,CAAEU,OAAQM,OACzCZ,QAAQC,IAAIM,K,+BAmBN,IAAD,OAGCM,EAAelB,KAAKJ,MAAMe,OAAOQ,QAAO,SAACC,GAAD,OAAUA,EAAKxC,KAAK8B,cAAcW,SAAS,EAAKzB,MAAMa,WAAWC,kBAG/G,OAFAL,QAAQC,IAAIY,GAEqB,IAA7BlB,KAAKJ,MAAMe,OAAOW,OAEd,wBAAI9C,UAAU,WAAd,6CAMJ,yBAAKA,UAAU,mBACX,6BACI,wBAAIA,UAAU,MAAd,sBACA,kBAAC,EAAD,CAAQA,UAAU,SAASN,WAAY8B,KAAK9B,cAEhD,6BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUa,SAAUmC,W,GAxD1BK,IAAMrB,YCJJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD6HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.9389aadd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Search = ({ userSearch }) => {\r\n    return (\r\n        <input\r\n            type=\"search\"\r\n            onChange={userSearch}\r\n            placeholder=\"Robot of your choice ;)\"\r\n        />\r\n    )\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport \"./Cards.css\";\r\n\r\nconst Cards = (prop) => {\r\n    return (\r\n\r\n        <div className=\"info\">\r\n            <img className=\"images\" alt=\"Sorry Not Found\" src={`https://robohash.org/${prop.id}?200*200`} />\r\n            <div>\r\n                <h2>{prop.name}</h2>\r\n                <h3>{prop.email}</h3>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport Card from \"./Cards.js\";\r\nimport \"./CardList.css\";\r\n\r\nconst Cardlist = ({ roboList }) => {\r\n\r\n    // To check is error boundry is working or no .\r\n    // if (true) {\r\n    //     throw new Error(\" bye \");\r\n    // }\r\n    return (\r\n        <div className=\"for-flex\">\r\n\r\n            {roboList.map((r, i) => {\r\n                return (<Card key={r.id} name={r.name} id={r.id} email={r.email} />)\r\n            })\r\n            }\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cardlist;","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: \"scroll\", border: \"0px solid black\", height: \"400px\" }}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import { React, Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor() {\r\n\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(err, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError === true) {\r\n            return <h1> Sorry due to Some Error unable to Load the page </h1>\r\n        }\r\n        return (this.props.children)\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","// All imports \r\nimport React from \"react\";\r\nimport Search from \"./Search.js\";\r\nimport Cardlist from \"./Cardlist\";\r\nimport Scroll from \"./Scroll.js\"\r\nimport ErrorBoundry from \"./ErrorBoundry.js\"\r\n// import { robots } from \"./member.js\";\r\nimport \"./App.css\"\r\n\r\n\r\n// This is the parent class : \r\n// So Dectrace it as a CLASS \r\n// with STATES and pass them as PROPERTIES to Componetns ,\r\n// States in the Constructor can change by Develops dependong on  events and we pass this \r\n// changed state as Fixed Properties (always fixed before sending to Componets)\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchItem: \"\",\r\n        }\r\n    }\r\n\r\n    //\r\n    componentDidMount() {\r\n        const a = fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(res => res.json())\r\n            .then(usr => this.setState({ robots: usr }));\r\n        console.log(a);\r\n        // this.setState({ robots: JSON.parse });\r\n    }\r\n\r\n    // Fuction that will will be passed as a property of component \r\n    userSearch = (event) => {\r\n\r\n        // Taking the input from the input , calling the fuction \r\n        // Setting the value to state using the set method -> that is the only way to do .\r\n        console.log(event.target);\r\n        console.log(event.target.value);\r\n        this.setState({ searchItem: event.target.value });\r\n        console.log(this.state.searchItem.toUpperCase());\r\n\r\n    }\r\n\r\n    // Rendec func Present in React.Component very imp\r\n    // We have to use this 100% when we creat a class using React\r\n    // Else *******\r\n    render() {\r\n\r\n        // Filter the robot depending on user serach\r\n        const fliteredItem = this.state.robots.filter((robo) => robo.name.toUpperCase().includes(this.state.searchItem.toUpperCase()));\r\n        console.log(fliteredItem);\r\n\r\n        if (this.state.robots.length === 0) {\r\n            return (\r\n                <h1 className=\"loading\"  >LOADING ::: Please Have Patience Dear ...</h1>\r\n            )\r\n        }\r\n\r\n        // Elements sent to index.js\r\n        return (\r\n            <div className=\"letsDecideLater\">\r\n                <div>\r\n                    <h1 className=\"h1\">ROBO:.:::.:FRIENDS</h1>\r\n                    <Search className=\"search\" userSearch={this.userSearch} />\r\n                </div>\r\n                <br />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <Cardlist roboList={fliteredItem} />\r\n                    </ErrorBoundry>\r\n\r\n                </Scroll >\r\n                {/* <div style={{ overflow: \"scroll\", border: \"0px solid black\", height: \"300px\" }}>\r\n                    <Cardlist roboList={fliteredItem} />\r\n                </div> */}\r\n            </div >\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport A from \"./App.js\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<A />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}